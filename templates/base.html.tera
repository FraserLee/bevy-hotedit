{% import "macros" as m %}
{% raw %}
{% endraw %}


<!DOCTYPE html>
<html lang="en">
    <head>
        <title>HotEdit</title>
        <meta charset="utf-8" />
        <style>
            @import url('https://fonts.googleapis.com/css2?family=Roboto:wght@100;400;900&display=swap');
            @import url('https://fonts.googleapis.com/css2?family=Inconsolata:wght@200;400;700;900&family=Roboto:wght@100;400;900&display=swap');
            /* f2545b
               a93f55
               19323c
               f3f7f0
               8c5e58
             */

            body {
                background-color: #19323c;
                color: #f3f7f0;
                font-family: "Inconsolata", monospace;
                font-size: 0.9rem;
                line-height: 1.4rem;
            }
            #content-outer {
                padding: 2rem 3rem;
                max-width: 32rem;
                margin: auto;
                display: flex;
            }
            h1 {
                font-size: 5rem;
                font-weight: 100;
                font-family: 'Roboto', sans-serif;
            }
            p {
                margin: 1.5rem 0;
            }
            p.bg {
                color: #808080;
            }
            a {
                color: #f3f7f0;
                text-decoration: underline;
            }
            a:hover {
                text-decoration: none;
            }
            code {
                font-family: "Inconsolata", monospace;
                padding: 0.05rem 0.1rem;
                border-radius: 0.2rem;
                background-color: #f2545b;
                color: #19323c;
            }
            code.bg {
                background-color: #a93f55;
            }

            form {
                display: flex;
                flex-direction: column;
                align-items: left;
                margin: 1.5rem 0;
            }

            .field {
                display: flex;
                flex-direction: column;
                align-items: left;
                margin: 0.5rem 0;
            }
            .field.checkbox {
                flex-direction: row;
            }

            input {
                border-radius: 0.2rem;
                border: 0px solid;
                padding: 0.1rem 0.2rem;
                left: 0; right: 0;
                font-size: 1rem;
                font-family: "Inconsolata", monospace;
                color: inherit;
                background-color: #326377;
            }

            input[type="checkbox" i] {
                width: 1.1rem;
                height: 1.1rem;
                margin: 0 0.5rem;
                accent-color: #326377;
                color-scheme: dark;
            }

            input.error {
                border: 1.5px solid #f2545b;
                border-bottom-left-radius: 0;
                border-bottom-right-radius: 0;
            }
            p.error {
                left: 0; right: 0;
                border-radius: 0 0 0.2rem 0.2rem;
                padding: 0.05rem 0.1rem;
                margin-top: -2px;
                z-index: -1;

                font-family: "Inconsolata", monospace;
                background-color: #f2545b;
                color: #19323c;
            }




        </style>
    </head>
    <body>
        <div id="content-outer">
            <div>
                <h1>{{ title }}</h1>
                <p> Welcome to <u>HotEdit</u>. Add the <code>#[hot]</code> macro
                    to one of your consts, and it'll be editable here in real-time.
                </p>
                <p class="bg">* also replace usage of
                    <code class="bg">CONST_NAME</code> with <br> the function-call 
                    <code class="bg">CONST_NAME()</code>.
                </p>
                <p> If changing the value of a const requires further steps 
                    (like pushing a new colour to a material), you can add the
                    <code>#[hot-refresh]</code> macro to a bevy system, and it
                    will only be called when the value of a const changes.
                </p>
                <p> I'm <i>fairly certain</i> I've implemented everything in a 
                    way that'll have zero runtime cost in a release build. If
                    you're better at rust than I am, please
                    <a href="https://github.com/FraserLee/bevy-hotedit">
                        check out the source</a>!





                <form action="/" method="post" enctype="multipart/form-data">
                    {{ m::input(label="Foo (String)", type="text",   name="string.foo") }}
                    {{ m::input(label="Bar (int)", type="number",    name="int.bar") }}
                    {{ m::input(label="Baz (float)", type="number",  name="float.baz") }}
                    {{ m::input(label="Qux (bool)", type="checkbox", name="bool.qux") }}
                    <!-- [> <input placeholder="baz (float)" pattern="[0-9]*[.]?[0-9]+" <] -->
                </form>
            </div>
        </div>
    </body>
    <script>
        var form = document.querySelector('form');
        var body = document.querySelector('body');

        function submit() {

            form.submit();

            // flash the background of the body a slightly 
            // different colour for a short time
            var bg = body.style.backgroundColor;
            body.style.backgroundColor = '#102026';
            setTimeout(function() {
                body.style.backgroundColor = bg;
            }, 250);
        }

        // submit form whenever the cursor leaves an input field
        form.addEventListener('focusout', function(e) {
            e.preventDefault();
            submit();
        });

        // submit form whenever the enter key is pressed
        form.addEventListener('keydown', function(e) {
            if (e.keyCode === 13) {
                e.preventDefault();
                submit();
            }
        });

        // submit form whenever a checkbox is clicked
        form.addEventListener('click', function(e) {
            if (e.target.type === 'checkbox') {
                submit();
            }
        });

    </script>
</html>

